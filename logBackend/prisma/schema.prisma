// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js" 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}










model Log {


    id                    String          @id @default(uuid())
    orgId                 String          @db.Text
    service               String          @db.Text
    level                 String          @db.Text
    timestamp             DateTime        
    message               String?         @db.Text
    latencyMs             Int 
    responseCode          Int 
    metadata              Json?
    rasS3Path             String          @db.Text
    createdAt             DateTime        @default(now())

    @@index([service, timestamp])
    @@index([orgId, timestamp])
}





model LogVector  {

      id            String              @id @default(uuid())
      logId         String              @db.Text
      orgId         String              @db.Text
      service       String              @db.Text
      model         String              @db.Text
      vectorId      String              @db.Text
      dims          Int?  
      createdAt     DateTime            @default(now())


      @@index([orgId, service, createdAt])
      @@index([ logId])

}






model Anomaly {
        id              String            @id @default(uuid())
        orgId           String?           @db.Text
        service         String?           @db.Text
        windowStart     DateTime
        windowEnd       DateTime
        errorCount      Int?
        totalCount      Int?
        errorRate       Float?
        baseline        Float?
        score           Float?            // embedding or ensemble score
        evidence        Json?
        createdAt       DateTime          @default(now())

        @@index([orgId, service, createdAt])
}




model User {
  id           String   @id @default(uuid())
  username     String   @unique
  passwordHash String
  role         String?
  createdAt    DateTime @default(now())
}